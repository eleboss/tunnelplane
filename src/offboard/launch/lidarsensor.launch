
<launch>

	<arg name="fcu_url" default="/dev/ttyACM0:921600" />
	<arg name="gcs_url" default="" />
	<arg name="tgt_system" default="1" />
	<arg name="tgt_component" default="1" />
	<arg name="log_output" default="screen" />

	<include file="$(find offboard)/launch/node.launch">
		<arg name="pluginlists_yaml" value="$(find offboard)/launch/px4_pluginlists.yaml" />
		<arg name="config_yaml" value="$(find offboard)/launch/px4_config.yaml" />

		<arg name="fcu_url" value="$(arg fcu_url)" />
		<arg name="gcs_url" value="$(arg gcs_url)" />
		<arg name="tgt_system" value="$(arg tgt_system)" />
		<arg name="tgt_component" value="$(arg tgt_component)" />
		<arg name="log_output" value="$(arg log_output)" />
		
		<!-- enable heartbeat send and reduce timeout -->
		<param name="conn_heartbeat" value="5.0" />
		<param name="conn_timeout" value="5.0" />
		<!-- automatically start mavlink on USB -->
		<param name="startup_px4_usb_quirk" value="true" />
		<param name="mocap/use_tf" value="true"/>
		<param name="mocap/use_pose" value="false"/>
	</include>
        
<!-- launch the realsense camera -->
  <!-- <include file="$(find realsense2_camera)/launch/plane.launch"/> -->

  	<arg name="camera_name" default="cam0" />
  	<!-- video_stream_provider can be a number as a video device or a url of a video stream -->
  	<arg name="video_stream_provider" default="0" />
  	<!-- set camera fps to -->
  	<arg name="set_camera_fps" default="120" />
  	<!-- set buffer queue size of frame capturing to -->
  	<arg name="buffer_queue_size" default="1" />
  	<!-- frames per second to query the camera for -->
  	<arg name="fps" default="20" />
  	<!-- frame_id for the camera -->
  	<arg name="frame_id" default="$(arg camera_name)" />
  	<!-- By default, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml
  	To use your own fill this arg with the corresponding url, e.g.:
  	"file:///$(find your_camera_package)/config/your_camera.yaml" -->
    <arg name="camera_info_url" default="file:///$(find offboard)/config/calibration.yaml" />
  	<!-- flip the image horizontally (mirror it) -->
  	<arg name="flip_horizontal" default="false" />
  	<!-- flip the image vertically -->
  	<arg name="flip_vertical" default="false" />
    <!-- force width and height, 0 means no forcing -->
    <arg name="width" default="640"/>
    <arg name="height" default="400"/>
  	<!-- if show a image_view window subscribed to the generated stream -->
	<arg name="visualize" default="false"/>

   	<!-- images will be published at /camera_name/image with the image transports plugins (e.g.: compressed) installed -->
   	<group ns="$(arg camera_name)">
	    <node pkg="video_stream_opencv" type="video_stream" name="$(arg camera_name)_stream" output="screen"> 
	    	<remap from="camera" to="image_raw" />
	    	<param name="camera_name" type="string" value="$(arg camera_name)" />
	        <param name="video_stream_provider" type="string" value="$(arg video_stream_provider)" />
	        <param name="set_camera_fps" type="double" value="$(arg set_camera_fps)" />
	        <param name="buffer_queue_size" type="int" value="$(arg buffer_queue_size)" />
	        <param name="fps" type="double" value="$(arg fps)" />
	        <param name="frame_id" type="string" value="$(arg frame_id)" />
	        <param name="camera_info_url" type="string" value="$(arg camera_info_url)" />
	        <param name="flip_horizontal" type="bool" value="$(arg flip_horizontal)" />
	        <param name="flip_vertical" type="bool" value="$(arg flip_vertical)" />
	        <param name="width" type="int" value="$(arg width)" />
	        <param name="height" type="int" value="$(arg height)" />
	    </node>

	    <node if="$(arg visualize)" name="$(arg camera_name)_image_view" pkg="image_view" type="image_view">
	    	<remap from="image" to="image_raw" />
	    </node>
	</group>


<!-- launch the apriltags detection  -->
  <!-- <include file="$(find apriltags)/launch/usb_cam_apriltags.launch"/> -->
  <node pkg="apriltags" type="apriltags" name="apriltags" output="screen">
    <param name="~default_tag_size" value="0.160" />

    <param name="~viewer" value="false" />
    <param name="~publish_detections_image" value="false" />

    <param name="~display_type" value="CUBE" />
    <param name="~marker_thickness" value="0.02" />

    <rosparam command="delete" param="tag_data" />
    <rosparam param="tag_data">
      "0": 
        size: 0.160
      "1":
        size: 0.160
      "2": 
        size: 0.160
      "3":
        size: 0.160
    </rosparam>

    <remap from="~image" to="cam0/image_raw"/>
    <remap from="~camera_info" to="cam0/camera_info"/>
    <remap from="~marker_array" to="apriltags/marker_array"/>
    <remap from="~detections" to="apriltags/detections"/>
  </node>

  <node pkg="offboard" type="ekf_fixer.py" name="fix" output="screen">
  </node>

  <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
  <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
  <param name="serial_baudrate"     type="int"    value="115200"/><!--A1/A2 -->
  <!--param name="serial_baudrate"     type="int"    value="256000"--><!--A3 -->
  <param name="frame_id"            type="string" value="laser"/>
  <param name="inverted"            type="bool"   value="false"/>
  <param name="angle_compensate"    type="bool"   value="true"/>
  </node>

  <!-- launch the point cloud process node -->
  <!-- <node pkg="segmentation" type="pointprocess" name="pcp"  output="screen"/> -->

<!-- launch the apriltags detection  -->
  <!-- <include file="$(find vins_estimator)/launch/usbcamera.launch"/> -->


</launch>



